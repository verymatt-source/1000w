# .github/workflows/deploy.yml
# -------------------------------------------------------------
# 1. 基础信息配置
# -------------------------------------------------------------
name: 证券公司价格定时更新与部署

# -------------------------------------------------------------
# 2. 触发器配置 (何时运行)
# -------------------------------------------------------------
on:
  # 定时触发器 (Schedule Trigger)
  schedule:
    # cron 表达式： '0,30 * * * *' 表示在每小时的 0 分和 30 分运行，即每隔 30 分钟。
    # Cron 表达式使用 UTC 时间，可能需要转换为您的本地时间。
    - cron: '0,30 * * * *' 
  
  # 手动触发器 (Manual Trigger)
  # 允许您在 Actions 页面点击按钮来手动运行此工作流，方便调试和即时更新。
  workflow_dispatch:

# -------------------------------------------------------------
# 3. 并发控制 (Concurrency)
# -------------------------------------------------------------
concurrency:
  # 确保如果工作流已经在运行，新的触发不会启动，而是取消正在运行的那个。
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

# -------------------------------------------------------------
# 4. 权限配置 (Permissions)
# -------------------------------------------------------------
# **【关键】** 部署到 GitHub Pages 必须授予这些权限
permissions:
  contents: read   # 读取仓库内容是 Checkout 代码的前提
  pages: write     # **Pages 部署必须的权限**
  id-token: write  # OpenID Connect 权限，用于与 Pages 服务进行身份验证

# -------------------------------------------------------------
# 5. 任务 (Jobs) 定义
# -------------------------------------------------------------
jobs:
  run_and_build:
    # 在最新的 Ubuntu 运行环境中执行此任务
    runs-on: ubuntu-latest
    
    # 定义任务的执行步骤
    steps:
      # 1. 检出代码 (Checkout)
      - name: 检出仓库代码
        # 使用 actions/checkout@v4 action 将仓库内容下载到运行环境中
        uses: actions/checkout@v4

      # 2. 设置 Python 环境
      - name: 设置 Python 3.11 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' 

      # 3. 安装依赖
      - name: 安装 Python 依赖 (requests)
        run: pip install requests
        
      # 4. 运行脚本并构建站点目录
      # **【关键修复步骤】** 确保文件生成在 Pages 要求的目录结构中
      - name: 运行价格脚本并构建 _site 目录
        run: |
          # 1. 创建 Pages 标准的输出目录 _site
          mkdir _site
          # 2. 运行 Python 脚本。-u 参数确保输出不被缓冲，方便在日志中查看
          python -u hs.py
          # 3. 移动并重命名文件。将脚本生成的 index_price.html 移动到 _site/index.html
          # Pages 默认会将 _site/index.html 作为网站的首页。
          # 这一步解决了之前“找不到文件”的问题
          mv index_price.html _site/index.html 
          
      # 5. 🛠 调试步骤：检查 _site 目录内容
      # 确认 _site/index.html 文件确实存在
      - name: 验证站点文件是否创建成功
        run: ls -al _site
        
      # 6. 配置 Pages 部署环境
      - name: 配置 GitHub Pages 部署
        # 这一步为 Pages 部署设置必要的环境变量
        uses: actions/configure-pages@v5

      # 7. 上传工件 (Artifact)
      - name: 上传待部署的文件 (Pages Artifact)
        # 将 _site 目录打包，上传到 GitHub Pages 专用的存储空间
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site' # 仅上传 _site 目录及其所有内容

      # 8. 部署到 GitHub Pages
      - name: 部署到 GitHub Pages
        id: deployment
        # 触发 Pages 托管服务，将上传的工件发布到公开 URL
        uses: actions/deploy-pages@v4
