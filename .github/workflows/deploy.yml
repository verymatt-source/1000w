# .github/workflows/deploy.yml
# ------------------------------------------------------------
# 1. 基础信息配置
# ------------------------------------------------------------
name: 证券公司价格定时更新与部署

# ------------------------------------------------------------
# 2. 触发器配置 (何时运行)
# ------------------------------------------------------------
on:
  # 定时触发器 (Schedule Trigger)
  schedule:
    # 新的定时任务：周一到周五，北京时间 9:05 - 15:35 运行 (UTC 1:05 - 7:35)
    - cron: '5,35 1-7 * * 1-5'
  
  # 手动触发器 (Manual Trigger)
  # 允许您在 Actions 页面点击按钮来手动运行此工作流。
  workflow_dispatch:

# ------------------------------------------------------------
# 3. 并发控制 (Concurrency)
# ------------------------------------------------------------
concurrency:
  # 确保如果工作流已经在运行，新的触发不会启动，而是取消正在运行的那个。
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

# ------------------------------------------------------------
# 4. 权限配置 (Permissions)
# ------------------------------------------------------------
# **【关键】** 部署到 GitHub Pages 必须授予这些权限
permissions:
  contents: read     # 读取仓库代码是必须的
  pages: write       # 部署到 Pages 必须的权限
  id-token: write    # 用于 Pages 身份验证

# ------------------------------------------------------------
# 5. 任务 (Jobs) 定义
# ------------------------------------------------------------
jobs:
  run_and_build:
    runs-on: ubuntu-latest
    
    # 【北京时间修正】设置环境变量 (Environment Variable)
    # 强制整个运行环境的时区设置为北京时间 (Asia/Shanghai)，
    # 这样 hs.py 中的 datetime.now() 就会直接返回正确的本地时间。
    env:
      TZ: 'Asia/Shanghai' 
    
    # 定义任务的执行步骤
    steps:
      # 1. 检出代码 (Checkout)
      - name: 检出仓库代码
        uses: actions/checkout@v4

      # 2. 设置 Python 环境
      - name: 设置 Python 3.11 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' 

      # 3. 安装依赖
      - name: 安装 Python 依赖 (requests)
        run: pip install requests
        
      # 4. 运行脚本并构建站点目录
      # 【文件路径修正】创建 _site 目录并移动文件，这是 Pages 部署的标准做法。
      - name: 运行价格脚本并构建 _site 目录
        run: |
          # 1. 创建 Pages 标准的输出目录 _site
          mkdir _site
          # 2. 运行 Python 脚本。-u 确保输出不被缓冲
          python -u hs.py
          # 3. 移动并重命名文件。将生成的 index_price.html 移动到 _site/index.html (Pages标准入口)
          mv index_price.html _site/index.html 
          
      # 5. 🛠 调试步骤：检查 _site 目录内容
      # 这是一个检查步骤，确保文件已成功生成
      - name: 验证站点文件是否创建成功
        run: ls -al _site
        
      # 6. 配置 Pages 部署环境
      - name: 配置 GitHub Pages 部署
        uses: actions/configure-pages@v5

      # 7. 上传工件 (Artifact)
      - name: 上传待部署的文件 (Pages Artifact)
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site' # 上传整个 _site 目录

      # 8. 部署到 GitHub Pages
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
