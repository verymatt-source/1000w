# .github/workflows/deploy.yml
# ------------------------------------------------------------
# 1. 基础信息配置
# ------------------------------------------------------------
name: 证券公司价格定时更新与部署

# ------------------------------------------------------------
# 2. 触发器配置 (何时运行)
# ------------------------------------------------------------
on:
  # 定时触发器 (Schedule Trigger)
  schedule:
    # 新的定时任务：周一到周五，北京时间 9:05 - 15:35 运行 (UTC 1:05 - 7:35)
    - cron: '5,35 1-7 * * 1-5'
  
  # 手动触发器 (Manual Trigger)
  # 允许您在 Actions 页面点击按钮来手动运行此工作流。
  workflow_dispatch:

# ------------------------------------------------------------
# 3. 并发控制 (Concurrency)
# ------------------------------------------------------------
concurrency:
  # 确保如果工作流已经在运行，新的触发不会启动，而是取消正在运行的那个。
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

# ------------------------------------------------------------
# 4. 权限配置 (Permissions)
# ------------------------------------------------------------
# **【关键】** 部署到 GitHub Pages 必须授予这些权限
permissions:
  contents: write     # 【已修改】：需要 write 权限才能将修改后的 notification_log.json 提交回 Pages 分支。
  pages: write       # 部署到 Pages 必须的权限
  id-token: write    # 用于 OIDC 认证，如果使用新的 Pages 部署方式则需要

# ------------------------------------------------------------
# 5. 任务 (Jobs) 配置
# ------------------------------------------------------------
jobs:
  run_and_build:
    runs-on: ubuntu-latest
    
    # 【北京时间修正】设置环境变量 (Environment Variable)
    env:
      TZ: 'Asia/Shanghai' 
      # 【新增】：将 GitHub Secret 注入到 Actions 的环境变量中
      SERVERCHAN_SCKEY: ${{ secrets.SERVERCHAN_SCKEY }}
    
    # 定义任务的执行步骤
    steps:
      # 1. 检出代码 (Checkout)
      # 检出代码时，也会检出上次运行遗留的 notification_log.json 文件
      - name: 检出仓库代码
        uses: actions/checkout@v4

      # 2. 设置 Python 环境
      - name: 设置 Python 3.11 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' 

      # 3. 安装依赖
      - name: 安装 Python 依赖 (requests)
        run: pip install requests
        
      # 4. 运行脚本并构建站点目录
      # 【已修改】：添加了对 notification_log.json 文件的处理逻辑
      - name: 运行价格脚本并构建 _site 目录
        run: |
          # 1. 创建 Pages 标准的输出目录 _site
          mkdir _site
          # 2. 运行 Python 脚本。-u 确保输出不被缓冲
          # 脚本运行时会读/写 notification_log.json
          python -u hs.py
          # 3. 移动并重命名文件。将生成的 index_price.html 移动到 _site/index.html (Pages标准入口)
          mv index_price.html _site/index.html 
          # 4. 【关键】：将日志文件也移动到 _site 目录，以便 Actions 上传并持久化
          if [ -f notification_log.json ]; then
            mv notification_log.json _site/
          fi
          
      # 5. 🛠 调试步骤：检查 _site 目录内容
      - name: 检查 _site 目录内容
        run: ls -R _site/

  # ------------------------------------------------------------
  # 6. 部署到 GitHub Pages (Deployment)
  # ------------------------------------------------------------
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: run_and_build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
